# SPDX-FileCopyrightText: Contributors to the Power Grid Model project <powergridmodel@lfenergy.org>
#
# SPDX-License-Identifier: MPL-2.0

"""Data types for power grid model dataset and component types."""

# This file is automatically generated. DO NOT modify it manually!

from enum import Enum
from typing import Any, Dict

# pylint: disable=invalid-name


class DataType(Enum):
    """
    A DataType is the type of a :class:`BatchDataset`.

    - Examples: 

        - DataType.input = "input"
        - DataType.update = "update"
    """

    {%- for dataset_type in dataset_types %}
    {{ dataset_type }} = "{{ dataset_type }}"
    {%- endfor %}


class ComponentType(Enum):
    """
    A ComponentType is the type of a grid component.

    - Examples: 

        - ComponentType.node = "node"
        - ComponentType.line = "line"
    """

    {%- for component in components %}
    {{ component }} = "{{ component }}"
    {%- endfor %}


# pylint: enable=invalid-name


def _map_to_datatypes(data: Dict[Any, Any]) -> Dict[DataType, Any]:
    """Helper function to map datatype str keys to DataType."""
    def map_keys(key: Any):
        if isinstance(key, str):
            return DataType[key]
        return key
    
    return {map_keys(key): value for key, value in data.items()}


def _map_to_componenttypes(data: Dict[Any, Any]) -> Dict[ComponentType, Any]:
    """Helper function to map componenttype str keys to ComponentType."""
    def map_keys(key: Any):
        if isinstance(key, str):
            return ComponentType[key]
        return key
    
    return {map_keys(key): value for key, value in data.items()}
