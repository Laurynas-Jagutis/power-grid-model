# SPDX-FileCopyrightText: Contributors to the Power Grid Model project <powergridmodel@lfenergy.org>
#
# SPDX-License-Identifier: MPL-2.0

name: CI Build

# Controls when the workflow will run.
on:
  # run pipeline on push event of main branch
  push:
    branches:
      - main
  # run pipeline on pull request
  pull_request:
  # run pipeline on merge queue
  merge_group:
  # run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      create_release:
        type: boolean
        description: Create a (pre-)release when CI passes
        default: false
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-ci-build
  cancel-in-progress: true

jobs:
  ci-started:
    runs-on: ubuntu-latest
    steps:
      - run: echo "ci started"

  build-test-release:
    name: build-test-release
    uses: "./.github/workflows/build-test-release.yml"
    permissions:
      contents: write
    with: 
      # create_release becomes true if the event that triggered this workflow is "workflow_dispatch" and inputs.create_release is true
      # create_release becomes true if the event that triggered this workflow is "push" on main
      # otherwise create_release becomes false
      create_release: ${{ (github.event_name == 'workflow_dispatch' && inputs.create_release) || github.event_name == 'push'}}

  check-code-quality:
    uses: "./.github/workflows/check-code-quality.yml"

  reuse-compliance:
    uses: "./.github/workflows/reuse-compliance.yml"

  clang-tidy:
    uses: "./.github/workflows/clang-tidy.yml"
    with:
      target: "power_grid_model_api_tests"

  ci-passed:
    runs-on: ubuntu-latest
    needs: [ci-started, build-test-release, check-code-quality, reuse-compliance, clang-tidy]

    steps:
      - run: echo "ci passed"

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [ci-passed]
    permissions:
      contents: write
      id-token: write  # Required for Trusted Publishing

    steps:
      - name: Download assets from GitHub release
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ github.repository }}
          # also download assets from pre-releases
          preRelease: true
          tag: ${{ github.event_name == 'release' && github.event.release.tag_name }}
          fileName: "*"
          # don't download GitHub-generated source tar and zip files
          tarBall: false
          zipBall: false
          # create a directory to store the downloaded assets
          out-file-path: assets-to-publish
          # don't extract downloaded files
          extract: false

      - name: List downloaded assets
        run: ls -la assets-to-publish

      # Rename to "Publish to PyPI" when testing is finished
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # remove when testing is finished
          repository-url: https://test.pypi.org/legacy/
          packages-dir: assets-to-publish
          skip-existing: true
          print-hash: true
          verbose: true
